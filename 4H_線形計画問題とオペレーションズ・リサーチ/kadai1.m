A = [351  6.2  0.8  6    2  0.4     0 0.09 0.03   0   0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
270  8    1.5 11  480  1       0 0.1  0.03   0   0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
260 17.5 20.5  6   90  1.3    25 0.04 0.11   0   0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
451 12   44.3  9   90  1.2     0 0.4  0.1    0   0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0;
156 12.7 11.2 65   90  2.6   800 0.1  0.4    0  10 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0;
 59  2.9  3.3 100  36  0.1   120 0.04 0.15   2   0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0;
721  0.6 81.6  10 780  0.1  2400 0.01 0.03   0   0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0;
 58  6    3.5 120   5  1.4     0 0.02 0.02   0   0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0;
130 17.5  6    80 100  3      60 0.02 0.15   1 530 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0;
118 20    3.5  12  90  0.7    40 0.15 0.2    1   0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0;
 77  1.9  0.1  5   12  0.5     0 0.1  0.03  15   0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0;
 51  1.3  0.2  35  57  0.5  1300 0.06 0.04   7   0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0;
 40  1.2  0.2  40  10  0.5     6 0.03 0.02  10   0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0;
 24  1.6  0.2  45  15  0.4    33 0.08 0.05  50   0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0;
 28  3    0.4  98  25  3.3  2600 0.12 0.3  100   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0;
311 34.2  0.7 470 600 23   10000 0.21 1     20   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0;
 40  0.8  0.3  14   4  0.2    40 0.09 0.02  50   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1];
b = [25 30 350 150 40 20 100 40 60 100 17 20 20 12 75 900 20 ]';
c = [2300 75 38 660 1300 10 1900 1.2 1.2 63 400 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]';

% 課題2.
% [0,10]の間に値を持つ17次元ベクトルxを1万個発生させる
% m:最小の購入費用のときの食材の割合
% xの1列目がmの初期値
% q:許容解の個数
% C:最小の購入費用
a = 10;
x = a.*rand(17,10000);
q = 0;
m = x(:,1);
C = m'*b;

% 課題1で作成したisFeasible(x)が1であれば数え上げ
% 購入費用が小さければCを更新
% そのときの食材の割合をmに更新
for n = 1:10000
    if isFeasible(x(:,n)) == 1
        q = q+1;
        if x(:,n)'*b < C
            C = x(:,n)'*b;
            m = x(:,n);
        end
    end
end


% 課題3.
% 得られた購入量mに対してAから栄養の量を求める
N = m'*A(:,1:11);


% 課題4.
% Xに30回実施した購入費用を順に格納していく
a = 10;
X = zeros(1,30);
% 課題2を30回実行
for i = 1:30
    x = a.*rand(17,10000);
    m = x(:,1);
    C = m'*b;
    for n = 1:10000
        if isFeasible(x(:,n)) == 1
            if x(:,n)'*b < C
                C = x(:,n)'*b;
                m = x(:,n);
            end
        end
    end
    X(1,i) = C;
end
% Xの平均、分散をM,Vとする
M = mean(X);
V = var(X);


% 課題5.
% 課題2と同様にして30万個のベクトルを発生
a = 10;
x = a.*rand(17,300000);
m = x(:,1);
C = m'*b;

% 100から30万の間の最小の購入費を求める
% 最小の購入費をC,このときのnをN
for n = 100:300000
    if isFeasible(x(:,n)) == 1
        if x(:,n)'*b < C
                C = x(:,n)'*b;
                N = n;
                m = x(:,n);
        end
    end
end
% Nを横軸,Cを縦軸にredの円でプロット
plot(N,C,'ro');


% 課題6.
% 100万個の組合わせから目的のものを探す

a = 10;
x = a.*rand(17,1000000);
% m:最小の購入費用のときの食材の組合せ
% 初期値は1個目の組合せ
m = x(:,1);
% C:費用
C = m'*b;

for n = 1:1000000
    % N:n個目の組合せの栄養量
    N = x(:,n)'*A(:,1:11);
    % Nが必要摂取量を満たす and 費用が最安
    % であれば mを更新
    if c(1:11)' < N & C > x(:,n)'*b
        m = x(:,n);
        C = m'*b;
        % Nl:最小の購入費用の組合せの栄養量
        Nl = m'*A(:,1:11);
    end
end
